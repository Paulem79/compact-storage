architectury {
    platformSetupLoomIde()
    forge()
}

loom {
//    accessWidenerPath = project(":common").loom.accessWidenerPath
    mixin {
        useLegacyMixinAp = true
    }
}

base {
    archivesName = "${rootProject.archives_base_name}-${rootProject.minecraft_version}-neoforge"
}

configurations {
    common
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    //modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}
